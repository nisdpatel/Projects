<Nisha Patel>
<CSCI 430>
<Fall, 2017>
<1: Insertion Sort with ordered, reverse, and random data>

Implementation:
<Describe experience implementing algorithm(s).>
I chose Python to implemention Insertion Sort. It was very easy to read and code in Python by just following the book's algorithm.
I have never programmed in Python, so I have to search for the syntax and look at the examples as I needed.
First, I tested with command line input n before testing it from bash script. 


Testing Expectations:
<Describe the results you expected during testing.>
I was sure about ordered search that it will be quicker than reverse and random. I expected that random will take longer, but reverse was the worse.

Testing Observations:
<Describe what you actually saw as you tested/plotted your results.>
I noticed that reverse took double time of random implementation. For instance, when n = 8500, random took 11.31 sec and reverse took 20.44 sec.
It was bit shocking to noticed that reverse was extremely longer. 


Analysis:
<Did your observations match your expectations?  If they differ, describe why/how.>
It matached for ordered numbers. However, I was expecting random to be the worse, but reverse took longer amongst all because I expected since I am passing random numbers
it will take longer, but I realized now that it is easier to sort them comapre to reverse order. 


Take-Away:
<What do you take away from this experience?>
Passing reverse numbers to sort are the worse and it took twice amount of random time. Now I know that sorting reverse array is the
most time consuming because it has time complexitiy of O(n^2). 
